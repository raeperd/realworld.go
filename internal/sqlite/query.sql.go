// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package sqlite

import (
	"context"
	"database/sql"
	"strings"
	"time"
)

const associateArticleTag = `-- name: AssociateArticleTag :exec
INSERT INTO article_tags (article_id, tag_id) VALUES (?, ?)
`

type AssociateArticleTagParams struct {
	ArticleID int64
	TagID     int64
}

func (q *Queries) AssociateArticleTag(ctx context.Context, arg AssociateArticleTagParams) error {
	_, err := q.db.ExecContext(ctx, associateArticleTag, arg.ArticleID, arg.TagID)
	return err
}

const checkFavoritedByUser = `-- name: CheckFavoritedByUser :many
SELECT article_id
FROM favorites
WHERE user_id = ? AND article_id IN (/*SLICE:article_ids*/?)
`

type CheckFavoritedByUserParams struct {
	UserID     int64
	ArticleIds []int64
}

func (q *Queries) CheckFavoritedByUser(ctx context.Context, arg CheckFavoritedByUserParams) ([]int64, error) {
	query := checkFavoritedByUser
	var queryParams []interface{}
	queryParams = append(queryParams, arg.UserID)
	if len(arg.ArticleIds) > 0 {
		for _, v := range arg.ArticleIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:article_ids*/?", strings.Repeat(",?", len(arg.ArticleIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:article_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var article_id int64
		if err := rows.Scan(&article_id); err != nil {
			return nil, err
		}
		items = append(items, article_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const countArticles = `-- name: CountArticles :one
SELECT COUNT(*) FROM articles
`

func (q *Queries) CountArticles(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countArticles)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countArticlesFeed = `-- name: CountArticlesFeed :one
SELECT COUNT(*)
FROM articles a
WHERE a.author_id IN (
    SELECT followed_id FROM follows WHERE follower_id = ?
)
`

func (q *Queries) CountArticlesFeed(ctx context.Context, followerID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countArticlesFeed, followerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (slug, title, description, body, author_id)
VALUES (?, ?, ?, ?, ?)
RETURNING id, slug, title, description, body, author_id, created_at, updated_at
`

type CreateArticleParams struct {
	Slug        string
	Title       string
	Description string
	Body        string
	AuthorID    int64
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (Article, error) {
	row := q.db.QueryRowContext(ctx, createArticle,
		arg.Slug,
		arg.Title,
		arg.Description,
		arg.Body,
		arg.AuthorID,
	)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createComment = `-- name: CreateComment :one
INSERT INTO comments (body, article_id, author_id)
VALUES (?, ?, ?)
RETURNING id, body, article_id, author_id, created_at, updated_at
`

type CreateCommentParams struct {
	Body      string
	ArticleID int64
	AuthorID  int64
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.Body, arg.ArticleID, arg.AuthorID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.ArticleID,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createFavorite = `-- name: CreateFavorite :exec
INSERT INTO favorites (user_id, article_id) VALUES (?, ?)
ON CONFLICT (user_id, article_id) DO NOTHING
`

type CreateFavoriteParams struct {
	UserID    int64
	ArticleID int64
}

func (q *Queries) CreateFavorite(ctx context.Context, arg CreateFavoriteParams) error {
	_, err := q.db.ExecContext(ctx, createFavorite, arg.UserID, arg.ArticleID)
	return err
}

const createFollow = `-- name: CreateFollow :exec
INSERT INTO follows (follower_id, followed_id) VALUES (?, ?)
ON CONFLICT (follower_id, followed_id) DO NOTHING
`

type CreateFollowParams struct {
	FollowerID int64
	FollowedID int64
}

func (q *Queries) CreateFollow(ctx context.Context, arg CreateFollowParams) error {
	_, err := q.db.ExecContext(ctx, createFollow, arg.FollowerID, arg.FollowedID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, password, bio, image) VALUES (?, ?, ?, ?, ?) RETURNING id, username, email, password, bio, image, created_at, updated_at
`

type CreateUserParams struct {
	Username string
	Email    string
	Password string
	Bio      sql.NullString
	Image    sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Bio,
		arg.Image,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE FROM articles WHERE id = ?
`

func (q *Queries) DeleteArticle(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteArticle, id)
	return err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = ?
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const deleteFollow = `-- name: DeleteFollow :exec
DELETE FROM follows WHERE follower_id = ? AND followed_id = ?
`

type DeleteFollowParams struct {
	FollowerID int64
	FollowedID int64
}

func (q *Queries) DeleteFollow(ctx context.Context, arg DeleteFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFollow, arg.FollowerID, arg.FollowedID)
	return err
}

const getAllTags = `-- name: GetAllTags :many
SELECT name FROM tags ORDER BY name
`

func (q *Queries) GetAllTags(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getAllTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArticleBySlug = `-- name: GetArticleBySlug :one
SELECT
    a.id, a.slug, a.title, a.description, a.body, a.author_id, a.created_at, a.updated_at,
    u.username as author_username,
    u.bio as author_bio,
    u.image as author_image
FROM articles a
JOIN users u ON a.author_id = u.id
WHERE a.slug = ?
`

type GetArticleBySlugRow struct {
	ID             int64
	Slug           string
	Title          string
	Description    string
	Body           string
	AuthorID       int64
	CreatedAt      time.Time
	UpdatedAt      time.Time
	AuthorUsername string
	AuthorBio      sql.NullString
	AuthorImage    sql.NullString
}

func (q *Queries) GetArticleBySlug(ctx context.Context, slug string) (GetArticleBySlugRow, error) {
	row := q.db.QueryRowContext(ctx, getArticleBySlug, slug)
	var i GetArticleBySlugRow
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AuthorUsername,
		&i.AuthorBio,
		&i.AuthorImage,
	)
	return i, err
}

const getArticleTagsByArticleID = `-- name: GetArticleTagsByArticleID :many
SELECT t.name
FROM tags t
JOIN article_tags at ON t.id = at.tag_id
WHERE at.article_id = ?
ORDER BY t.name
`

func (q *Queries) GetArticleTagsByArticleID(ctx context.Context, articleID int64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getArticleTagsByArticleID, articleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArticleTagsByArticleIDs = `-- name: GetArticleTagsByArticleIDs :many
SELECT at.article_id, t.name
FROM tags t
JOIN article_tags at ON t.id = at.tag_id
WHERE at.article_id IN (/*SLICE:article_ids*/?)
ORDER BY at.article_id, t.name
`

type GetArticleTagsByArticleIDsRow struct {
	ArticleID int64
	Name      string
}

func (q *Queries) GetArticleTagsByArticleIDs(ctx context.Context, articleIds []int64) ([]GetArticleTagsByArticleIDsRow, error) {
	query := getArticleTagsByArticleIDs
	var queryParams []interface{}
	if len(articleIds) > 0 {
		for _, v := range articleIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:article_ids*/?", strings.Repeat(",?", len(articleIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:article_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetArticleTagsByArticleIDsRow
	for rows.Next() {
		var i GetArticleTagsByArticleIDsRow
		if err := rows.Scan(&i.ArticleID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentByID = `-- name: GetCommentByID :one
SELECT id, body, article_id, author_id, created_at, updated_at
FROM comments
WHERE id = ?
`

func (q *Queries) GetCommentByID(ctx context.Context, id int64) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getCommentByID, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.ArticleID,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCommentWithAuthor = `-- name: GetCommentWithAuthor :one
SELECT
    c.id, c.body, c.article_id, c.author_id, c.created_at, c.updated_at,
    u.username as author_username,
    u.bio as author_bio,
    u.image as author_image
FROM comments c
JOIN users u ON c.author_id = u.id
WHERE c.id = ?
`

type GetCommentWithAuthorRow struct {
	ID             int64
	Body           string
	ArticleID      int64
	AuthorID       int64
	CreatedAt      time.Time
	UpdatedAt      time.Time
	AuthorUsername string
	AuthorBio      sql.NullString
	AuthorImage    sql.NullString
}

func (q *Queries) GetCommentWithAuthor(ctx context.Context, id int64) (GetCommentWithAuthorRow, error) {
	row := q.db.QueryRowContext(ctx, getCommentWithAuthor, id)
	var i GetCommentWithAuthorRow
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.ArticleID,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AuthorUsername,
		&i.AuthorBio,
		&i.AuthorImage,
	)
	return i, err
}

const getCommentsByArticleSlug = `-- name: GetCommentsByArticleSlug :many
SELECT
    c.id,
    c.body,
    c.created_at,
    c.updated_at,
    c.author_id,
    u.username as author_username,
    u.bio as author_bio,
    u.image as author_image
FROM comments c
JOIN articles a ON c.article_id = a.id
JOIN users u ON c.author_id = u.id
WHERE a.slug = ?
ORDER BY c.created_at DESC
`

type GetCommentsByArticleSlugRow struct {
	ID             int64
	Body           string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	AuthorID       int64
	AuthorUsername string
	AuthorBio      sql.NullString
	AuthorImage    sql.NullString
}

func (q *Queries) GetCommentsByArticleSlug(ctx context.Context, slug string) ([]GetCommentsByArticleSlugRow, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByArticleSlug, slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsByArticleSlugRow
	for rows.Next() {
		var i GetCommentsByArticleSlugRow
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AuthorID,
			&i.AuthorUsername,
			&i.AuthorBio,
			&i.AuthorImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFavoritesByArticleIDs = `-- name: GetFavoritesByArticleIDs :many
SELECT article_id, COUNT(*) as count
FROM favorites
WHERE article_id IN (/*SLICE:article_ids*/?)
GROUP BY article_id
`

type GetFavoritesByArticleIDsRow struct {
	ArticleID int64
	Count     int64
}

func (q *Queries) GetFavoritesByArticleIDs(ctx context.Context, articleIds []int64) ([]GetFavoritesByArticleIDsRow, error) {
	query := getFavoritesByArticleIDs
	var queryParams []interface{}
	if len(articleIds) > 0 {
		for _, v := range articleIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:article_ids*/?", strings.Repeat(",?", len(articleIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:article_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFavoritesByArticleIDsRow
	for rows.Next() {
		var i GetFavoritesByArticleIDsRow
		if err := rows.Scan(&i.ArticleID, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFavoritesCount = `-- name: GetFavoritesCount :one
SELECT COUNT(*) FROM favorites WHERE article_id = ?
`

func (q *Queries) GetFavoritesCount(ctx context.Context, articleID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getFavoritesCount, articleID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getFollowingByIDs = `-- name: GetFollowingByIDs :many
SELECT followed_id FROM follows
WHERE follower_id = ? AND followed_id IN (/*SLICE:followed_ids*/?)
`

type GetFollowingByIDsParams struct {
	FollowerID  int64
	FollowedIds []int64
}

func (q *Queries) GetFollowingByIDs(ctx context.Context, arg GetFollowingByIDsParams) ([]int64, error) {
	query := getFollowingByIDs
	var queryParams []interface{}
	queryParams = append(queryParams, arg.FollowerID)
	if len(arg.FollowedIds) > 0 {
		for _, v := range arg.FollowedIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:followed_ids*/?", strings.Repeat(",?", len(arg.FollowedIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:followed_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var followed_id int64
		if err := rows.Scan(&followed_id); err != nil {
			return nil, err
		}
		items = append(items, followed_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrCreateTag = `-- name: GetOrCreateTag :one
INSERT INTO tags (name) VALUES (?)
ON CONFLICT(name) DO UPDATE SET name=name
RETURNING id, name, created_at
`

// Note: The "DO UPDATE SET name=name" is intentional - it's a workaround to make RETURNING *
// work for both INSERT and conflict cases. ON CONFLICT DO NOTHING won't return the existing row.
func (q *Queries) GetOrCreateTag(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getOrCreateTag, name)
	var i Tag
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password, bio, image, created_at, updated_at FROM users WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password, bio, image, created_at, updated_at FROM users WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password, bio, image, created_at, updated_at FROM users WHERE username = ?
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const isFavorited = `-- name: IsFavorited :one
SELECT EXISTS(SELECT 1 FROM favorites WHERE user_id = ? AND article_id = ?)
`

type IsFavoritedParams struct {
	UserID    int64
	ArticleID int64
}

func (q *Queries) IsFavorited(ctx context.Context, arg IsFavoritedParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, isFavorited, arg.UserID, arg.ArticleID)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const isFollowing = `-- name: IsFollowing :one
SELECT EXISTS(SELECT 1 FROM follows WHERE follower_id = ? AND followed_id = ?)
`

type IsFollowingParams struct {
	FollowerID int64
	FollowedID int64
}

func (q *Queries) IsFollowing(ctx context.Context, arg IsFollowingParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, isFollowing, arg.FollowerID, arg.FollowedID)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const listArticles = `-- name: ListArticles :many
SELECT
    a.id,
    a.slug,
    a.title,
    a.description,
    a.created_at,
    a.updated_at,
    a.author_id,
    u.username as author_username,
    u.bio as author_bio,
    u.image as author_image
FROM articles a
JOIN users u ON a.author_id = u.id
ORDER BY a.created_at DESC
LIMIT ? OFFSET ?
`

type ListArticlesParams struct {
	Limit  int64
	Offset int64
}

type ListArticlesRow struct {
	ID             int64
	Slug           string
	Title          string
	Description    string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	AuthorID       int64
	AuthorUsername string
	AuthorBio      sql.NullString
	AuthorImage    sql.NullString
}

func (q *Queries) ListArticles(ctx context.Context, arg ListArticlesParams) ([]ListArticlesRow, error) {
	rows, err := q.db.QueryContext(ctx, listArticles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListArticlesRow
	for rows.Next() {
		var i ListArticlesRow
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AuthorID,
			&i.AuthorUsername,
			&i.AuthorBio,
			&i.AuthorImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listArticlesFeed = `-- name: ListArticlesFeed :many
SELECT
    a.id,
    a.slug,
    a.title,
    a.description,
    a.created_at,
    a.updated_at,
    a.author_id,
    u.username as author_username,
    u.bio as author_bio,
    u.image as author_image
FROM articles a
JOIN users u ON a.author_id = u.id
WHERE a.author_id IN (
    SELECT followed_id FROM follows WHERE follower_id = ?
)
ORDER BY a.created_at DESC
LIMIT ? OFFSET ?
`

type ListArticlesFeedParams struct {
	FollowerID int64
	Limit      int64
	Offset     int64
}

type ListArticlesFeedRow struct {
	ID             int64
	Slug           string
	Title          string
	Description    string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	AuthorID       int64
	AuthorUsername string
	AuthorBio      sql.NullString
	AuthorImage    sql.NullString
}

func (q *Queries) ListArticlesFeed(ctx context.Context, arg ListArticlesFeedParams) ([]ListArticlesFeedRow, error) {
	rows, err := q.db.QueryContext(ctx, listArticlesFeed, arg.FollowerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListArticlesFeedRow
	for rows.Next() {
		var i ListArticlesFeedRow
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AuthorID,
			&i.AuthorUsername,
			&i.AuthorBio,
			&i.AuthorImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticle = `-- name: UpdateArticle :one
UPDATE articles
SET
    slug = COALESCE(?1, slug),
    title = COALESCE(?2, title),
    description = COALESCE(?3, description),
    body = COALESCE(?4, body)
WHERE id = ?5
RETURNING id, slug, title, description, body, author_id, created_at, updated_at
`

type UpdateArticleParams struct {
	Slug        sql.NullString
	Title       sql.NullString
	Description sql.NullString
	Body        sql.NullString
	ID          int64
}

func (q *Queries) UpdateArticle(ctx context.Context, arg UpdateArticleParams) (Article, error) {
	row := q.db.QueryRowContext(ctx, updateArticle,
		arg.Slug,
		arg.Title,
		arg.Description,
		arg.Body,
		arg.ID,
	)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    email = COALESCE(?1, email),
    username = COALESCE(?2, username),
    password = COALESCE(?3, password),
    bio = COALESCE(?4, bio),
    image = COALESCE(?5, image)
WHERE id = ?6
RETURNING id, username, email, password, bio, image, created_at, updated_at
`

type UpdateUserParams struct {
	Email    sql.NullString
	Username sql.NullString
	Password sql.NullString
	Bio      sql.NullString
	Image    sql.NullString
	ID       int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.Bio,
		arg.Image,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
